#!/usr/bin/env python
# DWA Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t

gen = ParameterGenerator()

#-------------------------- DWA specific parameters ----------------------------
gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.0, 0)
gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0)
gen.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)

gen.add("path_distance_bias", double_t, 0, "The weight for the path distance part of the cost function", 32.0, 0.0)
gen.add("goal_distance_bias", double_t, 0, "The weight for the goal distance part of the cost function", 24.0, 0.0)
gen.add("occdist_scale", double_t, 0, "The weight for the obstacle distance part of the cost function", 0.01, 0.0)

gen.add("stop_time_buffer", double_t, 0, "The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds", 0.2, 0)
gen.add("oscillation_reset_dist", double_t, 0, "The distance the robot must travel before oscillation flags are reset, in meters", 0.05, 0)
gen.add("oscillation_reset_angle", double_t, 0, "The angle the robot must turn before oscillation flags are reset, in radians", 0.2, 0)

gen.add("forward_point_distance", double_t, 0, "The forward distance from the center point of the robot to place an additional scoring point, in meters", 0.325)
gen.add("sideways_point_distance", double_t, 0, "The sideways distance from the center point of the robot to place an additional scoring point, in meters", 0.0)

gen.add("min_turning_radius", double_t, 0, "The minimum turning radius of the robot", 0.5, 0.0, 10.0)
gen.add("max_diagonal_motion_angle", double_t, 0, "The maximum diagonal motion angle of the robot", 0.4, 0.0, 1.5708)

gen.add("scaling_speed", double_t, 0, "The absolute value of the velocity at which to start scaling the robot's footprint, in m/s", 0.25, 0)
gen.add("max_scaling_factor", double_t, 0, "The maximum factor to scale the robot's footprint by", 0.2, 0)

gen.add("vx_samples", int_t, 0, "The number of samples to use when exploring the x velocity space", 20, 1)
gen.add("vy_samples", int_t, 0, "The number of samples to use when exploring the y velocity space", 200, 1)
gen.add("vth_samples", int_t, 0, "The number of samples to use when exploring the theta velocity space", 20, 1)

gen.add("use_dwa", bool_t, 0, "Use dynamic window approach to constrain sampling velocities to small window.", True)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

#-------------------- BaseLocalPlanner specific parameters ---------------------
gen.add("max_trans_vel", double_t, 0, "The absolute value of the maximum translational velocity for the robot in m/s", 0.2, 0)
gen.add("min_trans_vel", double_t, 0, "The absolute value of the minimum translational velocity for the robot in m/s", 0.05, 0)

gen.add("max_vel_x", double_t, 0, "The maximum x velocity for the robot in m/s", 0.2)
gen.add("min_vel_x", double_t, 0, "The minimum x velocity for the robot in m/s", -0.2)

gen.add("max_vel_y", double_t, 0, "The maximum y velocity for the robot in m/s", 0.08)
gen.add("min_vel_y", double_t, 0, "The minimum y velocity for the robot in m/s", -0.08)

gen.add("max_rot_vel", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  0.4, 0)
gen.add("min_rot_vel", double_t, 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", 0.0, 0)

gen.add("acc_lim_x", double_t, 0, "The acceleration limit of the robot in the x direction", 1.0, 0, 20.0)
gen.add("acc_lim_y", double_t, 0, "The acceleration limit of the robot in the y direction", 1.0, 0, 20.0)
gen.add("acc_lim_theta", double_t, 0, "The acceleration limit of the robot in the theta direction", 1.0, 0, 20.0)
gen.add("acc_limit_trans", double_t, 0, "The absolute value of the maximum translational acceleration for the robot in m/s^2", 0.1, 0)

gen.add("prune_plan", bool_t, 0, "Start following closest point of global plan, not first point (if different).", False)

gen.add("xy_goal_tolerance", double_t, 0, "Within what maximum distance we consider the robot to be in goal", 0.1)
gen.add("yaw_goal_tolerance", double_t, 0, "Within what maximum angle difference we consider the robot to face goal direction", 0.1)

gen.add("trans_stopped_vel", double_t, 0, "Below what maximum velocity we consider the robot to be stopped in translation", 0.1)
gen.add("rot_stopped_vel", double_t, 0, "Below what maximum rotation velocity we consider the robot to be stopped in rotation", 0.1)
#-------------------------------------------------------------------------------

exit(gen.generate("dwa_local_planner", "dwa_local_planner", "DWAPlanner"))
